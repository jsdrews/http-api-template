// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Users
	// (GET /users)
	GetUsers(c *gin.Context, params GetUsersParams)
	// Add Users
	// (POST /users)
	AddUsers(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c, params)
}

// AddUsers operation middleware
func (siw *ServerInterfaceWrapper) AddUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddUsers(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.AddUsers)
}

type GetUsersRequestObject struct {
	Params GetUsersParams
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsersdefaultJSONResponse struct {
	Body       Users
	StatusCode int
}

func (response GetUsersdefaultJSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddUsersRequestObject struct {
	Body *AddUsersJSONRequestBody
}

type AddUsersResponseObject interface {
	VisitAddUsersResponse(w http.ResponseWriter) error
}

type AddUsers200JSONResponse UsersAdded

func (response AddUsers200JSONResponse) VisitAddUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddUsers400Response struct {
}

func (response AddUsers400Response) VisitAddUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AddUsers401Response struct {
}

func (response AddUsers401Response) VisitAddUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AddUsers500Response struct {
}

func (response AddUsers500Response) VisitAddUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get Users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Add Users
	// (POST /users)
	AddUsers(ctx context.Context, request AddUsersRequestObject) (AddUsersResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictGinHandlerFunc
type StrictMiddlewareFunc = runtime.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx *gin.Context, params GetUsersParams) {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AddUsers operation middleware
func (sh *strictHandler) AddUsers(ctx *gin.Context) {
	var request AddUsersRequestObject

	var body AddUsersJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddUsers(ctx, request.(AddUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddUsersResponseObject); ok {
		if err := validResponse.VisitAddUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVTW/kNgz9KwLboxMn2xYIfGpabNvtoYedLPYQzEFj02Nl9RWKymYa+L8XkiaeLw+w",
	"BbKn0VAkH8n3KL9A64x3Fi0HaF4gtAMamY+fAlL69eQ8EivMVjRS6Xx4lsZrhAYe3GB/zfbL1hmogDc+",
	"2QOTsmuo4PnCSa8uWtfhGu0FPjPJC5brnPBJatVJTgGEj1ERdlUBGccKekWB/5EGDyH/doN9CyCp/SAz",
	"kJazONJgeEugsZps0NzvtbdXQbUd8nLCdasHbBnGKpMSDmq8nziBMDhtMBxwsTdAWAxI2rVf9sEa+CsH",
	"wVjtEj18lRycPZtoO/69JJ9zAIzLChSjySX+SNhDAz/UO4nVW33VWVzj1KAkkpupv9uuS+M5lp6NZrqZ",
	"2r+ecijLuC5ZbTTvn1Xgb/T9iI8RT7zfzXkHlhwPCYAQ2xbDqUyOyd7GHkEeVFvtmjxlP8FjG0nxZpHG",
	"WKayQklIt5GH3b8/HBnJiajPd1CVpU6Zyu2u0IHZF1Eq27sUz4pzT3cYuEj9CSkoZ6GB68ury6s0BOfR",
	"Sq+ggZ+yqQIvecjV1PFVoGvk9JMIlKyc/dBBA38iFwWnEJIGOXvfv0CHoSXluUDdDShsNCsk4XqRFSXY",
	"ifBFebHC3hGKwJJSicneOq2xZcEDCsIQNYuADKktaOAxIm3SaItUXd+Xy6LF3PURz2kXzhUUDioi5Ej2",
	"DJJWRv1foIUjFquN4EEF0SvU3ZnkwdFs7kl8y6S+4J0NRSgd9jLqTErrLKPNR+m9Vm1mqH5IKzx9BL5l",
	"hUNRz2EL233ooxYT+0W90RhJm6ID8SqE8mzeQ1IOLMcKvAsz0rntutcIKsvzm+s237+b3wklo5DC4lfh",
	"kYWyWWeBHSHsbzhTxPFo6O+urt62xPI4zNS5mJ16BT+XCg6dP9j8kRLK+sjF6/rU65OVkQdH6t8EWcEv",
	"86kYyUotFkhPSOI9kaMjum+77hzd5VVLkXPvwMdobdpx7VqpdVJ/JL19uJq6zubBBW5ubm5uaulV/XQN",
	"43L8LwAA//97j30A1wgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
