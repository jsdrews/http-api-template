# https://taskfile.dev

version: '3'

vars:
  API_SPEC: src/api.yaml
  SERVER_DIR: src/server
  CLIENTS_DIR: src/clients

dotenv:
  - .env

tasks:
  default:
    cmds:
      - task -a
    desc: "List all tasks"
    silent: true

  _docker_preconditions:
    desc: "Checks for required programs"
    preconditions:
      - sh: command -v docker
        msg: docker needed to run these tasks
      - sh: command -v docker-compose
        msg: docker-compose needed to run these tasks
    silent: true
    internal: true

  generate-server:
    aliases:
      - gen-server
      - gen
    cmds:
      - |
        oapi-codegen \
        -config {{ .SERVER_DIR }}/api/oapi-codegen-server-cfg.yaml \
        -o {{ .SERVER_DIR }}/api/api.go \
        {{ .API_SPEC }}
      - |
        oapi-codegen \
        -config {{ .SERVER_DIR }}/api/oapi-codegen-types-cfg.yaml \
        -o {{ .SERVER_DIR }}/api/types.go \
        {{ .API_SPEC }}
    desc: "Generate code from openapi spec"
    preconditions:
      - sh: command -v go
        msg: go needed to run these tasks
      - sh: command -v oapi-codegen
        msg: oapi-codegen needed to run these tasks. (go install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@v1.8.1)
    silent: true
  
  generate-client:
    aliases:
      - gen-client
      - genc
    deps:
      - _docker_preconditions
    cmds:
      - |
        {{ if .CLI_ARGS }}

        docker run --rm \
        -v $PWD/{{ .API_SPEC }}:/api.yaml \
        -v $PWD/{{ .CLIENTS_DIR }}/{{ .CLI_ARGS }}:/generated \
        openapitools/openapi-generator-cli generate \
        -i /api.yaml \
        -g {{ .CLI_ARGS }} \
        -o /generated

        echo
        echo "Generated client code at {{ .CLIENTS_DIR }}/{{ .CLI_ARGS }}"

        {{ else }}

        docker run --rm openapitools/openapi-generator-cli list
        echo "Please specify client name from the above list"

        {{ end }}
    desc: "Generate client code from openapi spec"
    silent: true

  up:
    deps:
      - generate-server
      - _docker_preconditions
    cmds:
      - docker-compose up -d
      - |
        # Wait for the server to start
        until curl -s -f -o /dev/null localhost:$APP_PORT/api/v1/health
        do
          echo "Waiting for api to start..."
          sleep 2
        done
      - echo api is running at http://localhost:$APP_PORT
      - echo swagger ui is running at http://localhost:$SWAGGER_PORT
      - echo mock server is running at http://localhost:$MOCKSERVER_PORT
    desc: "Bring up all services"
    status:
      - test $(docker-compose ps -q app)
    silent: true

  down:
    deps:
      - _docker_preconditions
    cmds:
      - docker-compose down
    desc: "Bring down all services"
    silent: true

  restart:
    deps:
      - generate-server
      - _docker_preconditions
    cmds:
      - docker-compose restart app
    aliases:
      - r
      - rs
    desc: "Restart golang service"
    silent: true

  ps:
    deps:
      - _docker_preconditions
    cmds:
      - docker-compose ps
    desc: "Show all services"
    silent: true

  logs:
    deps:
      - _docker_preconditions
    cmds:
      - docker-compose logs -f app
    desc: "Show api service logs"
    silent: true

  db:
    deps:
      - _docker_preconditions
    cmds:
      - docker-compose exec -it mongo mongosh -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD}
    desc: "Connect to postgres db"
    silent: true

  purge:
    deps:
      - _docker_preconditions
    cmds:
      - docker-compose down -v --rmi local
    aliases:
      - rm
    desc: "Bring down all services and remove volumes and images"
    status:
      - test $(docker-compose ps -q | wc -l) -eq 0
    silent: true

  mock:
    deps:
      - _docker_preconditions
    cmds:
      - docker-compose up -d mockserver
      - echo
      - echo "Mock server is running at http://localhost:${MOCKSERVER_PORT}"
    desc: "Run mock server"
    silent: true

  edit:
    deps:
      - _docker_preconditions
    cmds:
      - docker compose up -d swagger-editor
      - echo
      - echo "Swagger editor is running at http://localhost:${SWAGGER_PORT}"
    desc: "Run swagger editor to edit api spec"
    silent: true

  test:
    deps:
      - up
    cmds:
      - |
        docker run --rm \
        -v $PWD/{{ .API_SPEC }}:/api.yaml \
        --network host schemathesis/schemathesis:stable \
        run /api.yaml --base-url http://localhost:8888/api/v1
      # - go test -v ./...
    desc: "Run api tests"
    silent: true
