# https://taskfile.dev

version: '3'

vars:
  VERSION: 1.0.0
  API_SPEC: openapi.yaml
  SERVER_DIR: src/server
  CLIENTS_DIR: src/clients
  ARTIFACTS_DIR: build
  SUBTASKS_IMG_NAMESPACE: ${COMPOSE_PROJECT_NAME}-sub-tasks  # Used in generate-server task

includes:
  sub-tasks: sub-tasks
  mk: helm

tasks:
  default:
    cmds:
      - task -a
    desc: "List all tasks"
    silent: true

  generate-server:
    aliases:
      - gen-server
      - gen
    deps:
      - sub-tasks:build-oapi-codegen
    cmds:
      - |
        docker run --rm \
        -v $PWD:/work \
        {{ .SUBTASKS_IMG_NAMESPACE }}/oapi-codegen \
        -config /work/{{ .SERVER_DIR }}/api/oapi-codegen-server-cfg.yaml \
        -o /work/{{ .SERVER_DIR }}/api/api.go \
        /work/{{ .API_SPEC }}
      - |
        docker run --rm \
        -v $PWD:/work \
        {{ .SUBTASKS_IMG_NAMESPACE }}/oapi-codegen \
        -config /work/{{ .SERVER_DIR }}/api/oapi-codegen-types-cfg.yaml \
        -o /work/{{ .SERVER_DIR }}/api/types.go \
        /work/{{ .API_SPEC }}
    desc: "Generate code from openapi spec"
    silent: true
  
  generate-client:
    aliases:
      - gen-client
      - genc
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - |
        {{ if .CLI_ARGS }}

        docker run --rm \
        -v $PWD/{{ .API_SPEC }}:/openapi.yaml \
        -v $PWD/{{ .CLIENTS_DIR }}/{{ .CLI_ARGS }}:/generated \
        openapitools/openapi-generator-cli generate \
        -i /openapi.yaml \
        -g {{ .CLI_ARGS }} \
        -o /generated

        echo
        echo "Generated client code at {{ .CLIENTS_DIR }}/{{ .CLI_ARGS }}"

        {{ else }}

        docker run --rm openapitools/openapi-generator-cli list
        echo "Please specify client name from the above list"

        {{ end }}
    desc: "Generate client code from openapi spec"
    silent: true

  build:
    deps:
      - sub-tasks:_docker_preconditions
      - generate-server
    cmds:
      - |
        docker build \
        --build-arg VERSION={{ .VERSION }} \
        --build-arg HTTPS_PROXY=${HTTPS_PROXY} \
        -t ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}:{{ .VERSION }} \
        src/server
      - |
        docker tag \
        ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}:{{ .VERSION }} \
        ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}:latest
      - |
        docker build \
        --build-arg VERSION={{ .VERSION }} \
        --build-arg HTTPS_PROXY=${HTTPS_PROXY} \
        -t ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}-mongo-migrations:{{ .VERSION }} \
        db/mongo/migrations
      - |
        docker tag \
        ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}-mongo-migrations:{{ .VERSION }} \
        ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}-mongo-migrations:latest
    desc: "Build all services"
    status:
      - test $(docker images ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME} | wc -l) -gt 1
    silent: true

  build-helm:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - |
        helm dep update ./helm/$COMPOSE_PROJECT_NAME
        sed "s/\&version .*/\&version {{ .VERSION }}/g" helm/$COMPOSE_PROJECT_NAME/Chart.yaml > /tmp/tmp-Chart.yaml
        rsync -a /tmp/tmp-Chart.yaml helm/$COMPOSE_PROJECT_NAME/Chart.yaml
        rm -rf /tmp/tmp-Chart.yaml
        helm package ./helm/$COMPOSE_PROJECT_NAME --version {{ .VERSION }} -d build/
        helm lint ./helm/$COMPOSE_PROJECT_NAME
        echo
        echo "Generated helm chart at build/$COMPOSE_PROJECT_NAME-{{ .VERSION }}.tgz"
    desc: "Build helm chart"
    status:
      - test -f build/$COMPOSE_PROJECT_NAME-{{ .VERSION }}.tgz
    silent: true

  publish:
    deps:
      - build
    cmds:
      - docker push ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}:{{ .VERSION }}
      - docker push ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}:latest
      - docker push ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}-mongo-migrations:{{ .VERSION }}
      - docker push ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}-mongo-migrations:latest
      - |
        export HELM_EXPERIMENTAL_OCI=1
        curl --request POST \
            --form "chart=@build/$COMPOSE_PROJECT_NAME-{{ .VERSION }}.tgz" \
            --user $PERSONAL_ACCESS_TOKEN_USERNAME:$PERSONAL_ACCESS_TOKEN \
            https://gitlab.com/api/v4/projects/29916427/packages/helm/api/stable/charts
    desc: "Publish all images"
    silent: true

  imgs:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - docker images | grep $COMPOSE_PROJECT_NAME
    desc: "Show all images"
    silent: true

  rmi:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - docker rmi ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}:{{ .VERSION }}
      - docker rmi ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}:latest
      - docker rmi ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}-mongo-migrations:{{ .VERSION }}
      - docker rmi ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME}-mongo-migrations:latest
      - rm -f build/$COMPOSE_PROJECT_NAME-{{ .VERSION }}.tgz
    status:
      - test $(docker images ${IMAGE_REGISTRY_URL}/${COMPOSE_PROJECT_NAME} | wc -l) -eq 1
    silent: true
    desc: "Remove all images"

  up:
    deps:
      - build
    cmds:
      - docker-compose up -d
      - |
        # Wait for the server to start
        COUNTER=0
        until curl -s -f -o /dev/null localhost:$API_PORT/api/v1/health
        do
          if [ $COUNTER -gt 30 ]; then
            echo "api failed to start"
            exit 1
          fi

          echo "Waiting for api to start..."
          COUNTER=$((COUNTER+1))
          sleep 2
          
        done
      - echo api is running at http://localhost:$API_PORT
      - echo swagger ui is running at http://localhost:$SWAGGER_PORT
      - echo mock server is running at http://localhost:$MOCKSERVER_PORT
    desc: "Bring up all services"
    status:
      - test $(docker-compose ps -q api)
    silent: true

  down:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - docker-compose down
    desc: "Bring down all services"
    silent: true

  restart:
    deps:
      - generate-server
      - sub-tasks:_docker_preconditions
    cmds:
      - |
        {{ if .CLI_ARGS }}
          docker-compose restart {{ .CLI_ARGS }}
        {{ else }}
          docker-compose restart api
        {{ end }}
    aliases:
      - r
      - rs
    desc: "Restart golang service"
    silent: true

  ps:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - docker-compose ps
    desc: "Show all services"
    silent: true

  logs:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - |
        {{ if .CLI_ARGS }}
          docker-compose logs -f {{ .CLI_ARGS }}
        {{ else }}
          docker-compose logs -f api
        {{ end }}
    desc: "Show api service logs"
    silent: true

  db:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - |
        docker-compose exec -it db \
        mongosh \
        mongodb://localhost:27017/${DB_NAME} \
        --authenticationDatabase=admin \
        -u ${DB_ROOT_USERNAME} -p ${DB_ROOT_PASSWORD} \
    desc: "Connect to postgres db"
    silent: true

  db-remote:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - |
        docker run \
        --rm -it --network host \
        mongo mongosh \
        "${DB_URI}" \
        --apiVersion 1 \
        --authenticationDatabase=admin \
        -u ${DB_ROOT_USERNAME} -p ${DB_ROOT_PASSWORD} \
    desc: "Connect to mongo atlas db"
    silent: true

  purge:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - docker-compose down -v --rmi local
      - task: rmi
    aliases:
      - rm
    desc: "Bring down all services and remove volumes and images"
    status:
      - test $(docker-compose ps -q | wc -l) -eq 0
    silent: true

  mock:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - docker-compose up -d mockserver
      - echo
      - echo "Mock server is running at http://localhost:${MOCKSERVER_PORT}"
    desc: "Run mock server"
    silent: true

  edit:
    deps:
      - sub-tasks:_docker_preconditions
    cmds:
      - docker compose up -d swagger-editor
      - echo
      - echo "Swagger editor is running at http://localhost:${SWAGGER_PORT}"
    desc: "Run swagger editor to edit api spec"
    silent: true

  test:
    deps:
      - up
    cmds:
      - |
        docker run --rm \
        -v $PWD/{{ .API_SPEC }}:/openapi.yaml \
        --network host schemathesis/schemathesis:stable \
        run /openapi.yaml --base-url http://localhost:8888/api/v1
      # - go test -v ./...
    desc: "Run api tests"
    silent: true

  extract-schema:
    desc: "Extract json schema from openapi spec"
    silent: true
    cmds:
      - mkdir -p {{ .ARTIFACTS_DIR }}
      - |
        task sub-tasks:openapi-json-schemextractor -- > {{ .ARTIFACTS_DIR }}/api-jsonschema.json
      - |
        cat {{ .ARTIFACTS_DIR }}/api-jsonschema.json | \
        task sub-tasks:jq -- '.{{ .CLI_ARGS }} + { title: "{{ .CLI_ARGS }}" }' \
        > {{ .ARTIFACTS_DIR }}/{{ .CLI_ARGS }}.json
        echo
        echo {{ .ARTIFACTS_DIR }}/{{ .CLI_ARGS }}.json generated
    preconditions:
      - sh: test {{ .CLI_ARGS }}
        msg: Please specify the element name

  extract-pydantic:
    desc: "Extract pydantic model from json schema"
    silent: true
    deps:
      - extract-schema
    cmds:
      - |
        task sub-tasks:datamodel-code-generator -- \
        --input-file-type jsonschema \
        --input {{ .ARTIFACTS_DIR }}/{{ .CLI_ARGS }}.json \
        --output {{ .ARTIFACTS_DIR }}/{{ .CLI_ARGS }}.py
        echo
        echo {{ .ARTIFACTS_DIR }}/{{ .CLI_ARGS }}.py generated
    preconditions:
      - sh: test {{ .CLI_ARGS }}
        msg: Please specify the element name
