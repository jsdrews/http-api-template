version: '3.2'

services:

  db:
    image: mongo
    hostname: ${DB_HOSTNAME}
    privileged: true
    volumes:
      - mongo-data:/data/db
      - type: bind
        source: ./db/mongo/mongod.conf
        target: /etc/mongod.conf
    expose:
      - "27017"
    command: [ "-f",  "/etc/mongod.conf" ]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${DB_NAME}
    networks:
      - network

  api:
    image: golang:1.20
    # build: src/server
    hostname: api-host
    privileged: true
    working_dir: /code
    volumes:
      - ./src/server:/code
    ports:
      - "${API_PORT}:${API_PORT}"
    expose:
      - "${API_PORT}"
    entrypoint: [ "go", "run", "main.go" ]
    environment:
      - API_PORT=${API_PORT}
      - API_DEV_MODE=${API_DEV_MODE}
      - DB_HOSTNAME=${DB_HOSTNAME}
      - DB_ROOT_USERNAME=${DB_ROOT_USERNAME}
      - DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - DB_NAME=${DB_NAME}
    networks:
      - network

  swagger-editor:
    image: swaggerapi/swagger-editor
    privileged: true
    volumes:
      - type: bind
        source: ./src/api.yaml
        target: /etc/api.yaml
    ports:
      - "${SWAGGER_PORT}:8080"
    environment:
      - SWAGGER_FILE=/etc/api.yaml

  mockserver:
    image: danielgtaylor/apisprout
    privileged: true
    volumes:
      - type: bind
        source: ./src/api.yaml
        target: /etc/api.yaml
    ports:
      - "${MOCKSERVER_PORT}:8000"
    entrypoint: 
      - "apisprout"
      - "--validate-server"
      - "/etc/api.yaml"

networks:
  network:

volumes:
  mongo-data:
